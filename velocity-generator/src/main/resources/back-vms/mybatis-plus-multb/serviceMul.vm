package ${projectOrAuthor.packageName}.Service;
/**
*  ${dbTableConfig.multiTableDesc}Service
*
* @author ${projectOrAuthor.author}
* @since ${projectOrAuthor.dataTime}
*/
@Service
public class ${dbTableConfig.multiTableNameCase}Service {

@Resource
private ${dbTableConfig.multiTableNameCase}Mapper ${dbTableConfig.multiTableName}Mapper;

#foreach( $mtcItem in $multiTableConfig)
@Resource
private ${mtcItem.tableNameCase}Mapper ${mtcItem.tableName}Mapper;
#end


public Page< Map > query${dbTableConfig.multiTableNameCase}(CommonParams commonParams, Map repairVo) {
    return ${dbTableConfig.multiTableName}Mapper.query${dbTableConfig.multiTableNameCase}(new Page< Map >(commonParams.getPageNum(), commonParams.getPageSize()), repairVo);
}

public Map selectByKey(String ${dbTableConfig.multiTableName}) {
return ${dbTableConfig.multiTableName}Mapper.selectByKey(${dbTableConfig.multiTableName});
}

@Transactional
public void insert(${dbTableConfig.multiTableNameCase} ${dbTableConfig.multiTableName}) {
#foreach( $mtcItem in $multiTableConfig)
this.${mtcItem.tableName}Mapper.insert(JSON.parseObject(JSON.toJSONString(${dbTableConfig.multiTableName}), ${mtcItem.tableNameCase}.class));
#end
}

@Transactional
public void updateByKey(${dbTableConfig.multiTableNameCase} ${dbTableConfig.multiTableName}) {
#foreach( $mtcItem in $multiTableConfig)
this.${mtcItem.tableName}Mapper.updateByKey(JSON.parseObject(JSON.toJSONString(${dbTableConfig.multiTableName}), ${mtcItem.tableNameCase}.class));
#end
}

@Transactional
public void deleteByKey(Integer ${dbTableConfig.multiTableName}) {
#foreach( $mtcItem in $multiTableConfig)
this.${mtcItem.tableName}Mapper.deleteByKey(${dbTableConfig.multiTableName});
#end
}

}
